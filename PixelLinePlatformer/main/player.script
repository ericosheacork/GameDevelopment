local MAX_GROUND_SPEED = 100
local MAX_AIR_SPEED = 80
local MAX_FALLSPEED = 500

local GRAVITY = -500

local JUMP_TAKEOFF_SPEED = 240
local DOUBLEJUMP_TAKEOFF_SPEED = 200

local RECOIL = 500

local CONTACT_POINT_RESPONSE  = hash("contact_point_response")
local GROUND = hash("ground")
local RESPAWN = hash("respawn")
local ENEMY = hash("enemy")

local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")
local FIRE = hash("fire")

local ANIM_WALK = hash("player_walk")
local ANIM_IDLE = hash("player_idle")
local ANIM_JUMP = hash("player_jump")
local ANIM_FALL = hash("player_fall")

local SPRITE = "visuals#sprite"

local function walk(self , direction)
	if direction ~=0 then
		self.direciton = direction
	end
	if self.ground_contact then
		self.velocity.x = MAX_GROUND_SPEED * direction
	else
		self.velocity.x = MAX_AIR_SPEED * direction
	end
end
local function play_animation(self , anim)
	if self.anim ~=anim then
		sprite.play_flipbook(SPRITE, anim)
		self.anim = anim
	end
end

local function update_animations(self)
	sprite.set_hflip(SPRITE, self.direction == -1)
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, ANIM_IDLE)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, ANIM_WALK)
		else
			play_animation(self, ANIM_FALL)
		end
	end
end

local function clamp(v,min,max)
	if v < min then return min
	elseif v > max then return max
	else return v end
end

local function decelerate(v,f,dt)
	local opposing = math.abs(v * f)
	if v > 0 then
		return math.floor(math.max(0, v - opposing * dt ))
	elseif v < 0 then
		return math.ceil(math.min(0, v + opposing * dt))
	else
		return 0
	end
end


function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	msg.post(".", "acquire_input_focus")

	msg.post("camera", "acquire_camera_focus")

	self.spawn_position = go.get_position()
	self.velovity = vmath.vector3(0,0,0)
	self.direction = 1
	self.correction = vmath.vector3()
	self.ground_contact = true
	self.previous_geound_contact = true
	self.anim = nil
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	self.velocity.y = self.velocity.y + GRAVITY * dt
	self.velocity.y = clamp(self.velocity.y, -MAX_FALLSPEED, MAX_FALLSPEED)

	if self.ground_contact then
		self.velocity.x = decelerate(self.velocity,x, 20 , dt )
		self.velocity.x = clamp(self.velocity.x,-MAX_GROUND_SPEED, MAX_GROUND_SPEED)
	else
		self.velocit.x = decelerate(self.velocity, 1, dt)
		self.velocity.x = clamp(self.velocity.x, -MAX_AIR_SPEED, MAX_AIR_SPEED)
	end

	local pos = go.get_position()
	pos = pos + self.velocity *dt
	go.set_position(pos)

	update_animations(self)

	self.previous_ground_contact = self.ground_contact
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end
local function walk(self, direction)
	if direction ~=0 then
		self.direction = direction
	end
	if self.ground_contact then
		self.velocity.x = MAX_GROUND_SPEED * direction
	else
		self.velocity.x = MAX_AIR_SPEED * direction
	end
end
local function handle_obstacle_contact(self,normal,distance)
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then 
			local comp = (distance - distance * proj) * normal
			go.set_position(go.get_position() + comp)
			slef.correction = self.correction + comp
		end
	end

	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	if normal.y > 0.7 then
		if not self.previous_ground_contact then 
			go.set("visuals","scale",1)
			slef.double_jump = false
		end
		self.ground_contact = true
		slef.velocity.y = 0
	end
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

local function jump(self)
	if self.ground_contact then 
		self.velocity.y =JUMP_TAKEOFF_SPEED
		play_animation(self, ANIM_JUMP)
		self.ground_contact = false
		squish()
	elseif not self.double_jump and self.velocity.y > 0 then
		self.velocity.y = self.velocity.y + DOUBLEJUMP_TAKEOFF_SPEED
		slef.double_jump = true
	end
end

local function squish()
	go.animate("visuals", "scale.x", go.PLAYBACK_ONCE_PINGPONG, 0.8 , go.EASING_INOUTBACK, 0.6)
end
local function abort_jump(self)
	if self.velocity.y 
function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if on_message_id == CONTACT_POINT_RESPONSE then
		if message.group ==GROUND then 
			handle_obstacle_contact(self, message.normal, message.distance)
		elseif message.group == RESPAWN or message.group == ENEMY then
			go.set_position(self.spawn_position)
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	if action_id == LEFT then
		walk(self, -action.value)
	elseif action_id == RIGHT then
		walk(self, action.value)
	elseif action_id == JUMP then
		if action.pressed then 
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	elseif action_id == FIRE then
		if action.released then
			fire(self)
		end	
	end
end
	
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed


function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
